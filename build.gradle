import com.gtnewhorizons.retrofuturagradle.mcp.ReobfuscatedJar

plugins {
    id("java")
    id("java-library")
    id("maven-publish")
    id("org.jetbrains.gradle.plugin.idea-ext") version "1.1.7"
    id("eclipse")
    id("com.gtnewhorizons.retrofuturagradle") version "1.3.8"
    id("com.matthewprenger.cursegradle") version "1.4.0"
}

version = "1.12.2-1.9.1"
group = "bruberu"
archivesBaseName = "GregTech Food Option"

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    withJavadocJar()
}

minecraft {
    mcVersion = "1.12.2"

    def args = [
            "-Dfml.coreMods.load=gregtechfoodoption.GTFOMixinPlugin",
            "-Dmixin.hotSwap=true",
            "-Dmixin.checks.interfaces=true",
            "-Dmixin.debug.export=true"
    ]
    extraRunJvmArguments.addAll(args)

    useDependencyAccessTransformers = true

    injectedTags.put("VERSION", project.version)
}

repositories {
    maven {
        url "https://maven.shadowfacts.net/"
    }
    maven {
        name = "ic2, forestry"
        setUrl("https://maven.ic2.player.to/")
    }
    maven {
        name = "OpenComputers"
        url = "https://maven.cil.li/"
    }
    maven {
        url "https://maven.k-4u.nl"
    }
    maven {
        name = "CurseForge"
        url = "https://minecraft.curseforge.com/api/maven/"
    }
    maven {
        name = "progwml6"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name = "blamejared"
        url = "https://maven.blamejared.com/"
    }
    maven {
        name = "CCL Maven"
        url = "https://chickenbones.net/maven/"
    }
    maven {
        name = "CyclopsMC"
        url = "https://oss.jfrog.org/artifactory/simple/libs-release/"
    }
    maven {
        name 'tterrag Maven'
        url "https://maven.tterrag.com/"
    }
    maven {
        name = "mcmoddev"
        url = "https://maven.mcmoddev.com"
    }
    maven {
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven {
        name = "Ellpeck's Maven"
        url = "https://maven.ellpeck.de"
    }
    maven {
        url = "https://www.cursemaven.com"
    }
    maven {
        url "https://www.ryanliptak.com/maven/"
    }
    maven {
        url "https://maven.cleanroommc.com"
    }
    maven { url = "https://repo.spongepowered.org/maven" }
    mavenLocal() // Must be last for caching to work
}

dependencies {
    api("org.spongepowered:mixin:0.8.3") { transitive = false }
    annotationProcessor ("org.spongepowered:mixin:0.8.3") {transitive = false}
    annotationProcessor "com.google.code.gson:gson:${gson_version}"
    annotationProcessor "com.google.guava:guava:${guava_version}-jre"
    annotationProcessor "org.ow2.asm:asm-debug-all:${asm_debug_version}"

    implementation 'zone.rong:mixinbooter:7.0'

    implementation "CraftTweaker2:CraftTweaker2-MC1120-Main:1.12-4.1.20.554"
    implementation "mezz.jei:jei_1.12.2:+"
    //deobfCompile "curse.maven:gregtechceu-557242:3612824"
    implementation "team.chisel.ctm:CTM:MC${project.minecraft.version}-1.0.2.31"
    //provided files("libs/gregicality-1.12.2-0.23.1.jar")
    implementation "codechicken:ChickenASM:1.12-1.0.2.9"
    implementation rfg.deobf("curse.maven:codechicken-lib-1-8-${ccl_pid}:${ccl_fid}")
    implementation "mcjty.theoneprobe:TheOneProbe-1.12:1.12-1.4.28-17"

    //deobfCompile "nuclearcraft-overhauled:NuclearCraft:2o.6.0:1.12.2"
    implementation "de.ellpeck.actuallyadditions:ActuallyAdditions:${project.minecraft.version}-r144"
    //provided files("libs/AppleCore-mc1.12.2-3.4.0.jar")
    implementation "applecore:AppleCore:${project.minecraft.version}-3.1.5:deobf"

    // One day...
    //compile "com.enderio.core:EnderCore:${mc_version}-0.5.76:dev"
    //compile "com.enderio:EnderIO:${mc_version}-5.3.70"

    implementation "curse.maven:agricraft-225635:3317747"
    implementation "curse.maven:infinitylib-251396:3317119"
    implementation "curse.maven:spice-of-life-carrot-edition-277616:2959847"

    compileOnly "curse.maven:enderio-64578:3328811"
    compileOnly "curse.maven:endercore-231868:2972849"
    compileOnly "info.loenwind.autoconfig:AutoConfig:${project.minecraft.version}-1.0.2"
    compileOnly "info.loenwind.autosave:AutoSave:${project.minecraft.version}-1.0.11"

    //compile "curse.maven:spiceoflife-220811:2571951"

    /*implementation files("libs/gregtech-2.6.1-beta-dev.jar")*/
    implementation rfg.deobf("curse.maven:gregtech-ce-unofficial-557242:4483462")
    implementation files("libs/AppleSkin-mc1.12-1.0.9.jar")
    implementation files("libs/groovyscript-0.4.0.jar")
    implementation files("libs/NuclearCraft-2o.6.0-1.12.2.jar")


    testImplementation 'junit:junit:4.13.2'
    implementation 'org.projectlombok:lombok:1.18.24'
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version
    // replace stuff in mcmod.info, nothing else
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // replace version and mcversion
        fcd.expand(
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }

    rename '(.+_at.cfg)', 'META-INF/$1' // Access Transformers
}

runClient {
    jvmArgs "-Xmx3G"
}

def mixinConfigRefMap = 'mixins.' + project.archives_base_name + '.refmap.json'
def mixinTmpDir = buildDir.path + File.separator + 'tmp' + File.separator + 'mixins'
def refMap = "${mixinTmpDir}" + File.separator + mixinConfigRefMap
def mixinSrg = "${mixinTmpDir}" + File.separator + "mixins.srg"

tasks.named("reobfJar", ReobfuscatedJar).configure {
    extraSrgFiles.from(mixinSrg)
}

tasks.named("compileJava", JavaCompile).configure {
    doFirst {
        new File(mixinTmpDir).mkdirs()
    }
    options.compilerArgs += [
            "-AreobfSrgFile=${tasks.reobfJar.srg.get().asFile}",
            "-AoutSrgFile=${mixinSrg}",
            "-AoutRefMapFile=${refMap}",
    ]
}


jar {
    manifest.attributes(
            "FMLCorePlugin": "gregtechfoodoption.GTFOMixinPlugin",
            "FMLCorePluginContainsFMLMod": "true",
            "ForceLoadAsMod": project.gradle.startParameter.taskNames[0] == "build",
            "FMLAT": "gtfo_at.cfg",
            "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
    )
}